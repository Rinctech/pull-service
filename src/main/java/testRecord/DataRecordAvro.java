/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package testRecord;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DataRecordAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1776583348475312895L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DataRecordAvro\",\"namespace\":\"testRecord\",\"fields\":[{\"name\":\"MeterSerialnumber\",\"type\":\"string\"},{\"name\":\"ip\",\"type\":\"string\"},{\"name\":\"Port\",\"type\":\"long\"},{\"name\":\"MeterFlag\",\"type\":\"string\"},{\"name\":\"Obis\",\"type\":\"string\"},{\"name\":\"Ic\",\"type\":\"string\"},{\"name\":\"Attributes\",\"type\":\"string\"},{\"name\":\"payload\",\"type\":\"string\"},{\"name\":\"EKEY\",\"type\":\"string\"},{\"name\":\"AKEY\",\"type\":\"string\"},{\"name\":\"Security_Id\",\"type\":\"string\"},{\"name\":\"msg_type\",\"type\":\"string\"},{\"name\":\"RequestID\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DataRecordAvro> ENCODER =
      new BinaryMessageEncoder<DataRecordAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DataRecordAvro> DECODER =
      new BinaryMessageDecoder<DataRecordAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DataRecordAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DataRecordAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DataRecordAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DataRecordAvro>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DataRecordAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DataRecordAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DataRecordAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DataRecordAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence MeterSerialnumber;
   private java.lang.CharSequence ip;
   private long Port;
   private java.lang.CharSequence MeterFlag;
   private java.lang.CharSequence Obis;
   private java.lang.CharSequence Ic;
   private java.lang.CharSequence Attributes;
   private java.lang.CharSequence payload;
   private java.lang.CharSequence EKEY;
   private java.lang.CharSequence AKEY;
   private java.lang.CharSequence Security_Id;
   private java.lang.CharSequence msg_type;
   private java.lang.CharSequence RequestID;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DataRecordAvro() {}

  /**
   * All-args constructor.
   * @param MeterSerialnumber The new value for MeterSerialnumber
   * @param ip The new value for ip
   * @param Port The new value for Port
   * @param MeterFlag The new value for MeterFlag
   * @param Obis The new value for Obis
   * @param Ic The new value for Ic
   * @param Attributes The new value for Attributes
   * @param payload The new value for payload
   * @param EKEY The new value for EKEY
   * @param AKEY The new value for AKEY
   * @param Security_Id The new value for Security_Id
   * @param msg_type The new value for msg_type
   * @param RequestID The new value for RequestID
   */
  public DataRecordAvro(java.lang.CharSequence MeterSerialnumber, java.lang.CharSequence ip, java.lang.Long Port, java.lang.CharSequence MeterFlag, java.lang.CharSequence Obis, java.lang.CharSequence Ic, java.lang.CharSequence Attributes, java.lang.CharSequence payload, java.lang.CharSequence EKEY, java.lang.CharSequence AKEY, java.lang.CharSequence Security_Id, java.lang.CharSequence msg_type, java.lang.CharSequence RequestID) {
    this.MeterSerialnumber = MeterSerialnumber;
    this.ip = ip;
    this.Port = Port;
    this.MeterFlag = MeterFlag;
    this.Obis = Obis;
    this.Ic = Ic;
    this.Attributes = Attributes;
    this.payload = payload;
    this.EKEY = EKEY;
    this.AKEY = AKEY;
    this.Security_Id = Security_Id;
    this.msg_type = msg_type;
    this.RequestID = RequestID;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return MeterSerialnumber;
    case 1: return ip;
    case 2: return Port;
    case 3: return MeterFlag;
    case 4: return Obis;
    case 5: return Ic;
    case 6: return Attributes;
    case 7: return payload;
    case 8: return EKEY;
    case 9: return AKEY;
    case 10: return Security_Id;
    case 11: return msg_type;
    case 12: return RequestID;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: MeterSerialnumber = (java.lang.CharSequence)value$; break;
    case 1: ip = (java.lang.CharSequence)value$; break;
    case 2: Port = (java.lang.Long)value$; break;
    case 3: MeterFlag = (java.lang.CharSequence)value$; break;
    case 4: Obis = (java.lang.CharSequence)value$; break;
    case 5: Ic = (java.lang.CharSequence)value$; break;
    case 6: Attributes = (java.lang.CharSequence)value$; break;
    case 7: payload = (java.lang.CharSequence)value$; break;
    case 8: EKEY = (java.lang.CharSequence)value$; break;
    case 9: AKEY = (java.lang.CharSequence)value$; break;
    case 10: Security_Id = (java.lang.CharSequence)value$; break;
    case 11: msg_type = (java.lang.CharSequence)value$; break;
    case 12: RequestID = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'MeterSerialnumber' field.
   * @return The value of the 'MeterSerialnumber' field.
   */
  public java.lang.CharSequence getMeterSerialnumber() {
    return MeterSerialnumber;
  }


  /**
   * Sets the value of the 'MeterSerialnumber' field.
   * @param value the value to set.
   */
  public void setMeterSerialnumber(java.lang.CharSequence value) {
    this.MeterSerialnumber = value;
  }

  /**
   * Gets the value of the 'ip' field.
   * @return The value of the 'ip' field.
   */
  public java.lang.CharSequence getIp() {
    return ip;
  }


  /**
   * Sets the value of the 'ip' field.
   * @param value the value to set.
   */
  public void setIp(java.lang.CharSequence value) {
    this.ip = value;
  }

  /**
   * Gets the value of the 'Port' field.
   * @return The value of the 'Port' field.
   */
  public long getPort() {
    return Port;
  }


  /**
   * Sets the value of the 'Port' field.
   * @param value the value to set.
   */
  public void setPort(long value) {
    this.Port = value;
  }

  /**
   * Gets the value of the 'MeterFlag' field.
   * @return The value of the 'MeterFlag' field.
   */
  public java.lang.CharSequence getMeterFlag() {
    return MeterFlag;
  }


  /**
   * Sets the value of the 'MeterFlag' field.
   * @param value the value to set.
   */
  public void setMeterFlag(java.lang.CharSequence value) {
    this.MeterFlag = value;
  }

  /**
   * Gets the value of the 'Obis' field.
   * @return The value of the 'Obis' field.
   */
  public java.lang.CharSequence getObis() {
    return Obis;
  }


  /**
   * Sets the value of the 'Obis' field.
   * @param value the value to set.
   */
  public void setObis(java.lang.CharSequence value) {
    this.Obis = value;
  }

  /**
   * Gets the value of the 'Ic' field.
   * @return The value of the 'Ic' field.
   */
  public java.lang.CharSequence getIc() {
    return Ic;
  }


  /**
   * Sets the value of the 'Ic' field.
   * @param value the value to set.
   */
  public void setIc(java.lang.CharSequence value) {
    this.Ic = value;
  }

  /**
   * Gets the value of the 'Attributes' field.
   * @return The value of the 'Attributes' field.
   */
  public java.lang.CharSequence getAttributes() {
    return Attributes;
  }


  /**
   * Sets the value of the 'Attributes' field.
   * @param value the value to set.
   */
  public void setAttributes(java.lang.CharSequence value) {
    this.Attributes = value;
  }

  /**
   * Gets the value of the 'payload' field.
   * @return The value of the 'payload' field.
   */
  public java.lang.CharSequence getPayload() {
    return payload;
  }


  /**
   * Sets the value of the 'payload' field.
   * @param value the value to set.
   */
  public void setPayload(java.lang.CharSequence value) {
    this.payload = value;
  }

  /**
   * Gets the value of the 'EKEY' field.
   * @return The value of the 'EKEY' field.
   */
  public java.lang.CharSequence getEKEY() {
    return EKEY;
  }


  /**
   * Sets the value of the 'EKEY' field.
   * @param value the value to set.
   */
  public void setEKEY(java.lang.CharSequence value) {
    this.EKEY = value;
  }

  /**
   * Gets the value of the 'AKEY' field.
   * @return The value of the 'AKEY' field.
   */
  public java.lang.CharSequence getAKEY() {
    return AKEY;
  }


  /**
   * Sets the value of the 'AKEY' field.
   * @param value the value to set.
   */
  public void setAKEY(java.lang.CharSequence value) {
    this.AKEY = value;
  }

  /**
   * Gets the value of the 'Security_Id' field.
   * @return The value of the 'Security_Id' field.
   */
  public java.lang.CharSequence getSecurityId() {
    return Security_Id;
  }


  /**
   * Sets the value of the 'Security_Id' field.
   * @param value the value to set.
   */
  public void setSecurityId(java.lang.CharSequence value) {
    this.Security_Id = value;
  }

  /**
   * Gets the value of the 'msg_type' field.
   * @return The value of the 'msg_type' field.
   */
  public java.lang.CharSequence getMsgType() {
    return msg_type;
  }


  /**
   * Sets the value of the 'msg_type' field.
   * @param value the value to set.
   */
  public void setMsgType(java.lang.CharSequence value) {
    this.msg_type = value;
  }

  /**
   * Gets the value of the 'RequestID' field.
   * @return The value of the 'RequestID' field.
   */
  public java.lang.CharSequence getRequestID() {
    return RequestID;
  }


  /**
   * Sets the value of the 'RequestID' field.
   * @param value the value to set.
   */
  public void setRequestID(java.lang.CharSequence value) {
    this.RequestID = value;
  }

  /**
   * Creates a new DataRecordAvro RecordBuilder.
   * @return A new DataRecordAvro RecordBuilder
   */
  public static testRecord.DataRecordAvro.Builder newBuilder() {
    return new testRecord.DataRecordAvro.Builder();
  }

  /**
   * Creates a new DataRecordAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DataRecordAvro RecordBuilder
   */
  public static testRecord.DataRecordAvro.Builder newBuilder(testRecord.DataRecordAvro.Builder other) {
    if (other == null) {
      return new testRecord.DataRecordAvro.Builder();
    } else {
      return new testRecord.DataRecordAvro.Builder(other);
    }
  }

  /**
   * Creates a new DataRecordAvro RecordBuilder by copying an existing DataRecordAvro instance.
   * @param other The existing instance to copy.
   * @return A new DataRecordAvro RecordBuilder
   */
  public static testRecord.DataRecordAvro.Builder newBuilder(testRecord.DataRecordAvro other) {
    if (other == null) {
      return new testRecord.DataRecordAvro.Builder();
    } else {
      return new testRecord.DataRecordAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for DataRecordAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DataRecordAvro>
    implements org.apache.avro.data.RecordBuilder<DataRecordAvro> {

    private java.lang.CharSequence MeterSerialnumber;
    private java.lang.CharSequence ip;
    private long Port;
    private java.lang.CharSequence MeterFlag;
    private java.lang.CharSequence Obis;
    private java.lang.CharSequence Ic;
    private java.lang.CharSequence Attributes;
    private java.lang.CharSequence payload;
    private java.lang.CharSequence EKEY;
    private java.lang.CharSequence AKEY;
    private java.lang.CharSequence Security_Id;
    private java.lang.CharSequence msg_type;
    private java.lang.CharSequence RequestID;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(testRecord.DataRecordAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.MeterSerialnumber)) {
        this.MeterSerialnumber = data().deepCopy(fields()[0].schema(), other.MeterSerialnumber);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.ip)) {
        this.ip = data().deepCopy(fields()[1].schema(), other.ip);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.Port)) {
        this.Port = data().deepCopy(fields()[2].schema(), other.Port);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.MeterFlag)) {
        this.MeterFlag = data().deepCopy(fields()[3].schema(), other.MeterFlag);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.Obis)) {
        this.Obis = data().deepCopy(fields()[4].schema(), other.Obis);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.Ic)) {
        this.Ic = data().deepCopy(fields()[5].schema(), other.Ic);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.Attributes)) {
        this.Attributes = data().deepCopy(fields()[6].schema(), other.Attributes);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.payload)) {
        this.payload = data().deepCopy(fields()[7].schema(), other.payload);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.EKEY)) {
        this.EKEY = data().deepCopy(fields()[8].schema(), other.EKEY);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.AKEY)) {
        this.AKEY = data().deepCopy(fields()[9].schema(), other.AKEY);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.Security_Id)) {
        this.Security_Id = data().deepCopy(fields()[10].schema(), other.Security_Id);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.msg_type)) {
        this.msg_type = data().deepCopy(fields()[11].schema(), other.msg_type);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.RequestID)) {
        this.RequestID = data().deepCopy(fields()[12].schema(), other.RequestID);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
    }

    /**
     * Creates a Builder by copying an existing DataRecordAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(testRecord.DataRecordAvro other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.MeterSerialnumber)) {
        this.MeterSerialnumber = data().deepCopy(fields()[0].schema(), other.MeterSerialnumber);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ip)) {
        this.ip = data().deepCopy(fields()[1].schema(), other.ip);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Port)) {
        this.Port = data().deepCopy(fields()[2].schema(), other.Port);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.MeterFlag)) {
        this.MeterFlag = data().deepCopy(fields()[3].schema(), other.MeterFlag);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.Obis)) {
        this.Obis = data().deepCopy(fields()[4].schema(), other.Obis);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.Ic)) {
        this.Ic = data().deepCopy(fields()[5].schema(), other.Ic);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.Attributes)) {
        this.Attributes = data().deepCopy(fields()[6].schema(), other.Attributes);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.payload)) {
        this.payload = data().deepCopy(fields()[7].schema(), other.payload);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.EKEY)) {
        this.EKEY = data().deepCopy(fields()[8].schema(), other.EKEY);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.AKEY)) {
        this.AKEY = data().deepCopy(fields()[9].schema(), other.AKEY);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.Security_Id)) {
        this.Security_Id = data().deepCopy(fields()[10].schema(), other.Security_Id);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.msg_type)) {
        this.msg_type = data().deepCopy(fields()[11].schema(), other.msg_type);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.RequestID)) {
        this.RequestID = data().deepCopy(fields()[12].schema(), other.RequestID);
        fieldSetFlags()[12] = true;
      }
    }

    /**
      * Gets the value of the 'MeterSerialnumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getMeterSerialnumber() {
      return MeterSerialnumber;
    }


    /**
      * Sets the value of the 'MeterSerialnumber' field.
      * @param value The value of 'MeterSerialnumber'.
      * @return This builder.
      */
    public testRecord.DataRecordAvro.Builder setMeterSerialnumber(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.MeterSerialnumber = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'MeterSerialnumber' field has been set.
      * @return True if the 'MeterSerialnumber' field has been set, false otherwise.
      */
    public boolean hasMeterSerialnumber() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'MeterSerialnumber' field.
      * @return This builder.
      */
    public testRecord.DataRecordAvro.Builder clearMeterSerialnumber() {
      MeterSerialnumber = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ip' field.
      * @return The value.
      */
    public java.lang.CharSequence getIp() {
      return ip;
    }


    /**
      * Sets the value of the 'ip' field.
      * @param value The value of 'ip'.
      * @return This builder.
      */
    public testRecord.DataRecordAvro.Builder setIp(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.ip = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ip' field has been set.
      * @return True if the 'ip' field has been set, false otherwise.
      */
    public boolean hasIp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ip' field.
      * @return This builder.
      */
    public testRecord.DataRecordAvro.Builder clearIp() {
      ip = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Port' field.
      * @return The value.
      */
    public long getPort() {
      return Port;
    }


    /**
      * Sets the value of the 'Port' field.
      * @param value The value of 'Port'.
      * @return This builder.
      */
    public testRecord.DataRecordAvro.Builder setPort(long value) {
      validate(fields()[2], value);
      this.Port = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Port' field has been set.
      * @return True if the 'Port' field has been set, false otherwise.
      */
    public boolean hasPort() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'Port' field.
      * @return This builder.
      */
    public testRecord.DataRecordAvro.Builder clearPort() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'MeterFlag' field.
      * @return The value.
      */
    public java.lang.CharSequence getMeterFlag() {
      return MeterFlag;
    }


    /**
      * Sets the value of the 'MeterFlag' field.
      * @param value The value of 'MeterFlag'.
      * @return This builder.
      */
    public testRecord.DataRecordAvro.Builder setMeterFlag(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.MeterFlag = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'MeterFlag' field has been set.
      * @return True if the 'MeterFlag' field has been set, false otherwise.
      */
    public boolean hasMeterFlag() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'MeterFlag' field.
      * @return This builder.
      */
    public testRecord.DataRecordAvro.Builder clearMeterFlag() {
      MeterFlag = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'Obis' field.
      * @return The value.
      */
    public java.lang.CharSequence getObis() {
      return Obis;
    }


    /**
      * Sets the value of the 'Obis' field.
      * @param value The value of 'Obis'.
      * @return This builder.
      */
    public testRecord.DataRecordAvro.Builder setObis(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.Obis = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'Obis' field has been set.
      * @return True if the 'Obis' field has been set, false otherwise.
      */
    public boolean hasObis() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'Obis' field.
      * @return This builder.
      */
    public testRecord.DataRecordAvro.Builder clearObis() {
      Obis = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'Ic' field.
      * @return The value.
      */
    public java.lang.CharSequence getIc() {
      return Ic;
    }


    /**
      * Sets the value of the 'Ic' field.
      * @param value The value of 'Ic'.
      * @return This builder.
      */
    public testRecord.DataRecordAvro.Builder setIc(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.Ic = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'Ic' field has been set.
      * @return True if the 'Ic' field has been set, false otherwise.
      */
    public boolean hasIc() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'Ic' field.
      * @return This builder.
      */
    public testRecord.DataRecordAvro.Builder clearIc() {
      Ic = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'Attributes' field.
      * @return The value.
      */
    public java.lang.CharSequence getAttributes() {
      return Attributes;
    }


    /**
      * Sets the value of the 'Attributes' field.
      * @param value The value of 'Attributes'.
      * @return This builder.
      */
    public testRecord.DataRecordAvro.Builder setAttributes(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.Attributes = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'Attributes' field has been set.
      * @return True if the 'Attributes' field has been set, false otherwise.
      */
    public boolean hasAttributes() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'Attributes' field.
      * @return This builder.
      */
    public testRecord.DataRecordAvro.Builder clearAttributes() {
      Attributes = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'payload' field.
      * @return The value.
      */
    public java.lang.CharSequence getPayload() {
      return payload;
    }


    /**
      * Sets the value of the 'payload' field.
      * @param value The value of 'payload'.
      * @return This builder.
      */
    public testRecord.DataRecordAvro.Builder setPayload(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.payload = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'payload' field has been set.
      * @return True if the 'payload' field has been set, false otherwise.
      */
    public boolean hasPayload() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'payload' field.
      * @return This builder.
      */
    public testRecord.DataRecordAvro.Builder clearPayload() {
      payload = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'EKEY' field.
      * @return The value.
      */
    public java.lang.CharSequence getEKEY() {
      return EKEY;
    }


    /**
      * Sets the value of the 'EKEY' field.
      * @param value The value of 'EKEY'.
      * @return This builder.
      */
    public testRecord.DataRecordAvro.Builder setEKEY(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.EKEY = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'EKEY' field has been set.
      * @return True if the 'EKEY' field has been set, false otherwise.
      */
    public boolean hasEKEY() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'EKEY' field.
      * @return This builder.
      */
    public testRecord.DataRecordAvro.Builder clearEKEY() {
      EKEY = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'AKEY' field.
      * @return The value.
      */
    public java.lang.CharSequence getAKEY() {
      return AKEY;
    }


    /**
      * Sets the value of the 'AKEY' field.
      * @param value The value of 'AKEY'.
      * @return This builder.
      */
    public testRecord.DataRecordAvro.Builder setAKEY(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.AKEY = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'AKEY' field has been set.
      * @return True if the 'AKEY' field has been set, false otherwise.
      */
    public boolean hasAKEY() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'AKEY' field.
      * @return This builder.
      */
    public testRecord.DataRecordAvro.Builder clearAKEY() {
      AKEY = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'Security_Id' field.
      * @return The value.
      */
    public java.lang.CharSequence getSecurityId() {
      return Security_Id;
    }


    /**
      * Sets the value of the 'Security_Id' field.
      * @param value The value of 'Security_Id'.
      * @return This builder.
      */
    public testRecord.DataRecordAvro.Builder setSecurityId(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.Security_Id = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'Security_Id' field has been set.
      * @return True if the 'Security_Id' field has been set, false otherwise.
      */
    public boolean hasSecurityId() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'Security_Id' field.
      * @return This builder.
      */
    public testRecord.DataRecordAvro.Builder clearSecurityId() {
      Security_Id = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'msg_type' field.
      * @return The value.
      */
    public java.lang.CharSequence getMsgType() {
      return msg_type;
    }


    /**
      * Sets the value of the 'msg_type' field.
      * @param value The value of 'msg_type'.
      * @return This builder.
      */
    public testRecord.DataRecordAvro.Builder setMsgType(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.msg_type = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'msg_type' field has been set.
      * @return True if the 'msg_type' field has been set, false otherwise.
      */
    public boolean hasMsgType() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'msg_type' field.
      * @return This builder.
      */
    public testRecord.DataRecordAvro.Builder clearMsgType() {
      msg_type = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'RequestID' field.
      * @return The value.
      */
    public java.lang.CharSequence getRequestID() {
      return RequestID;
    }


    /**
      * Sets the value of the 'RequestID' field.
      * @param value The value of 'RequestID'.
      * @return This builder.
      */
    public testRecord.DataRecordAvro.Builder setRequestID(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.RequestID = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'RequestID' field has been set.
      * @return True if the 'RequestID' field has been set, false otherwise.
      */
    public boolean hasRequestID() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'RequestID' field.
      * @return This builder.
      */
    public testRecord.DataRecordAvro.Builder clearRequestID() {
      RequestID = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DataRecordAvro build() {
      try {
        DataRecordAvro record = new DataRecordAvro();
        record.MeterSerialnumber = fieldSetFlags()[0] ? this.MeterSerialnumber : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.ip = fieldSetFlags()[1] ? this.ip : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.Port = fieldSetFlags()[2] ? this.Port : (java.lang.Long) defaultValue(fields()[2]);
        record.MeterFlag = fieldSetFlags()[3] ? this.MeterFlag : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.Obis = fieldSetFlags()[4] ? this.Obis : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.Ic = fieldSetFlags()[5] ? this.Ic : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.Attributes = fieldSetFlags()[6] ? this.Attributes : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.payload = fieldSetFlags()[7] ? this.payload : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.EKEY = fieldSetFlags()[8] ? this.EKEY : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.AKEY = fieldSetFlags()[9] ? this.AKEY : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.Security_Id = fieldSetFlags()[10] ? this.Security_Id : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.msg_type = fieldSetFlags()[11] ? this.msg_type : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.RequestID = fieldSetFlags()[12] ? this.RequestID : (java.lang.CharSequence) defaultValue(fields()[12]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DataRecordAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<DataRecordAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DataRecordAvro>
    READER$ = (org.apache.avro.io.DatumReader<DataRecordAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.MeterSerialnumber);

    out.writeString(this.ip);

    out.writeLong(this.Port);

    out.writeString(this.MeterFlag);

    out.writeString(this.Obis);

    out.writeString(this.Ic);

    out.writeString(this.Attributes);

    out.writeString(this.payload);

    out.writeString(this.EKEY);

    out.writeString(this.AKEY);

    out.writeString(this.Security_Id);

    out.writeString(this.msg_type);

    out.writeString(this.RequestID);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.MeterSerialnumber = in.readString(this.MeterSerialnumber instanceof Utf8 ? (Utf8)this.MeterSerialnumber : null);

      this.ip = in.readString(this.ip instanceof Utf8 ? (Utf8)this.ip : null);

      this.Port = in.readLong();

      this.MeterFlag = in.readString(this.MeterFlag instanceof Utf8 ? (Utf8)this.MeterFlag : null);

      this.Obis = in.readString(this.Obis instanceof Utf8 ? (Utf8)this.Obis : null);

      this.Ic = in.readString(this.Ic instanceof Utf8 ? (Utf8)this.Ic : null);

      this.Attributes = in.readString(this.Attributes instanceof Utf8 ? (Utf8)this.Attributes : null);

      this.payload = in.readString(this.payload instanceof Utf8 ? (Utf8)this.payload : null);

      this.EKEY = in.readString(this.EKEY instanceof Utf8 ? (Utf8)this.EKEY : null);

      this.AKEY = in.readString(this.AKEY instanceof Utf8 ? (Utf8)this.AKEY : null);

      this.Security_Id = in.readString(this.Security_Id instanceof Utf8 ? (Utf8)this.Security_Id : null);

      this.msg_type = in.readString(this.msg_type instanceof Utf8 ? (Utf8)this.msg_type : null);

      this.RequestID = in.readString(this.RequestID instanceof Utf8 ? (Utf8)this.RequestID : null);

    } else {
      for (int i = 0; i < 13; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.MeterSerialnumber = in.readString(this.MeterSerialnumber instanceof Utf8 ? (Utf8)this.MeterSerialnumber : null);
          break;

        case 1:
          this.ip = in.readString(this.ip instanceof Utf8 ? (Utf8)this.ip : null);
          break;

        case 2:
          this.Port = in.readLong();
          break;

        case 3:
          this.MeterFlag = in.readString(this.MeterFlag instanceof Utf8 ? (Utf8)this.MeterFlag : null);
          break;

        case 4:
          this.Obis = in.readString(this.Obis instanceof Utf8 ? (Utf8)this.Obis : null);
          break;

        case 5:
          this.Ic = in.readString(this.Ic instanceof Utf8 ? (Utf8)this.Ic : null);
          break;

        case 6:
          this.Attributes = in.readString(this.Attributes instanceof Utf8 ? (Utf8)this.Attributes : null);
          break;

        case 7:
          this.payload = in.readString(this.payload instanceof Utf8 ? (Utf8)this.payload : null);
          break;

        case 8:
          this.EKEY = in.readString(this.EKEY instanceof Utf8 ? (Utf8)this.EKEY : null);
          break;

        case 9:
          this.AKEY = in.readString(this.AKEY instanceof Utf8 ? (Utf8)this.AKEY : null);
          break;

        case 10:
          this.Security_Id = in.readString(this.Security_Id instanceof Utf8 ? (Utf8)this.Security_Id : null);
          break;

        case 11:
          this.msg_type = in.readString(this.msg_type instanceof Utf8 ? (Utf8)this.msg_type : null);
          break;

        case 12:
          this.RequestID = in.readString(this.RequestID instanceof Utf8 ? (Utf8)this.RequestID : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










